Все URL, начинающиеся с /uploads/  (например /uploads/1.jpeg) отдавались из директории /home/box/web/uploads
Все URL с расширением (например /img/1.jpeg) отдавались из директории /home/box/web/public
Все URL без расширения (например /question/123)  возвращали HTTP 404
https://github.com/AndreiZ77/sk_web/blob/master/etc/nginx_2.conf
git clone https://github.com/your_account/stepic_web_project.git /home/box/web
bash /home/box/web/init.sh

git clone https://github.com/AndreiZ77/sk_web.git /home/box/web
chmod a+x init.sh
bash /home/box/web/init.sh

запускать от суперпользователя sudo
читаем конфиг/ открываем порты
дочерние процессы workers с пониж. привилегиями

Создаем init.sh (touch init.sh), прописываем ему права на выполнение (chmod a+x init.sh), создаем папку
etc (mkdir etc), копируем туда дефолтный конфиг, он поможет в дальнейшем
(cp /etc/nginx/nginx.conf ~/web/etc).


1) Не смотрите в пример конфига, который находится в /etc/gunicorn.d/wsgi.example, я так и не смог
адаптировать их. Как оказалось, в документации правильнее описано, а там сказано, что конфиг - это
python-модуль, в котором переменные и есть опции со значениями. Пример: bind="0.0.0.0:8080"
2) Так как в папке /etc/gunicorn.d/ может быть много конфигов, при запуске gunicorn нужно указывать
"-c config", где config - файл, которыgitй находится в папке /etc/gunicorn.d
3) Также, чтобы указать, какая функция и какой модуль будут WSGI-приложением, нужно в команде указать
 "module.function", где module - это ваш файл с функцией, а function - имя функции
В результате в моём случае пример был такой "gunicorn -c hello.py hello:application"
4) Модуль с WSGI функцией ищется во всех стандартных путях с библиотеками Python, которого, естественно,
 там нет, поэтому в конфиг стоит также добавить переменную pythonpath="path", где path - это путь к папке.
 где находится модуль с WSGI функцией

 небольшая поправка, при указании файла конфига стоит указать полный путь: -c /etc/gunicorn.d/hello.py

По поводу пункта 4 - можно запускать gunicorn, находясь в директории с проектом:
cd /home/box/web
$ /web: gunicorn -c /etc/gunicorn.d/hello.py hello

Сделал вроде всё, что нужно, IP в hello.py: bind = "127.0.0.1:8080" или "0.0.0.0:8080"   в nginx.conf
proxy_pass http://127.0.0.1:8080" или http:// ﻿0.0.0.0:8080. (всегда одинаков в обоих файлах).
Пробовал с обоими. ﻿Ещё в ﻿hello.py ﻿прописан ﻿pythonpath="/home/box/web" , а также пути к логам и пиду.

Мой алгоритм после рестарта системы:
﻿sh init.sh - проходит без ошибок
sudo /etc/init.d/nginx start -﻿  проходит без ошибок
gunicorn -c hello.py hello:app  - проходит без ошибок
﻿curl -I http://127.0.0.1/hello/ ﻿-  404 Not Found

В основном конфиге nginx есть строка include  /etc/nginx/sites-enabled/default которая добавляет
конфиг из этого файла. Делая из  default ссылку на наш конфиг мы подключаем его в основной.

потому что терминал - это один процесс, и вы его занимаете gunicorn-ом, тогда терминал перестаёт отвечать.
Тут пример как с apt-get или aptitude - пока не установиться приложение, терминал вам не дадут. CTRL+C -
это прерывание процесса. Поэтому терминал доступен, но gunicorn больше не работает. Для запуска процесса
в фоне используют & на конце комманды, пример: gunicorn -b 0.0.0.0:8080 -c hello &

на главной странице gunicorn в разделе "quickstart" есть вся необходимая информация для решения:
http://gunicorn.org/#quickstart﻿

﻿нужно лишь написать wsgi приложение в hello.py и добавить location ﻿в nginx.conf, потом запустить gunicorn
с необходимыми ﻿параметрами(на сайте показано как, если хотите конфиг написать - в документации тоже есть)

если вам не трудно, не могли бы вы пояснить, почему строки
proxy_set_header Host $host;
proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;вы поместили внутрь location?
На слайде они были сверху (и это меня смутило)

Пришлось потратить временя на конфиг gunicorn.
За основу берем конфиг /etc/gunicorn.d/wsgi.example
Нужно расскоментировать:
'mode': 'wsgi'
'working_dir' и указать в какой папке находится файл hello.py
'args': 'hello:func' - нужно изменить на своё. Формат такой hello - это название питон файла без расширения,
ищется в 'working_dir', func - это название функции в этом файле, которую нужно запустить.
Также потребуется указать адрес и порт в bind, количество workers и timeout.
Gunicorn должен слушать все интерфейсы 0.0.0.0 и порт 8080
Чтобы gunicorn использовал этот конфиг, его нужно перезапустить командой:
sudo service gunicorn restart
В конфинге nginx для префикса hello ﻿нужно проксироваться на адрес ﻿http://127.0.0.1:8080﻿ сам nginx должен работать
на 80 порту и слушать все сетевые интерфейсы.

Чтобы не висла консоль можно запускать в фоновом режиме: gunicorn -b 0.0.0.0:8080 hello:app &

1) конфигурация nginx рассматривается в начале третьего степа, причем у нас все проще, прямой адрес, а не upstream'ы
2) gunicorn в самом простом случае "конфигурируется" одной строкой при запуске, ключи есть здесь -
http://docs.gunicorn.org/en/stable/run.html﻿ , исходя из задания нам нужен только бинд и название питон
приложения(причем именно просто название, без расширения ﻿), во время запуска gunicorn'а надо находится в папке
с питон приложением, все!
доп: если хотите перезапустить gunicorn: sudo ps aux ﻿| grep gunicorn, ﻿и стопаете первый по порядку процесс,
например: ﻿kill 33, где 33 - pid процесса﻿

Ребята, свежая инфа с поля боя.
Никакие конфиги не смотрим и не редактируем стандартные. Пишем только свой и там действительно пару строчек.
На каком сокете вещать и сколько воркеров.
По поводу ошибки в задании в части символической ссылки - просто надо посмотреть как они прописали ссылку в файле,
в прошлых уроках https://stepik.org/lesson/14825/step/11?unit=4174
Питон третий уже встроен. Я писал скрипт на третьем питоне, без никаких ﻿шаманьих трюков запустилось.
Все проще простого.
1) Естественно, дорабатываем предыдущее задание. Редактируем проксирование в nginx.conf (locations в том числе)
2) Добавляем символическую ссылку из вышеуказанного урла.
3) Пишем конфиг gunicorn, как в символической ссылке
4) Само приложение пишем, находится оно в ~web/    , а не в web/etc
﻿Ну а дальше как в прошлом задании через git и init.sh
еще в init.sh в конце добавил строчку
sudo service gunicorn restart

Решение задачи в одну строчку: "\n".join(environ.get('QUERY_STRING').split("&"))

Решил добить перед дедлайном, сработало /home/box/web sudo gunicorn - b 0.0.0.0:8080 hello:app ,
а unicorn.config в топку.

Для проверки того, что gunicorn возвращает данные, можно использовать следующую команду.
После выполнения команды должно вернуться: a=b
curl 127.0.0.1:8080/?a=b
Для проверки что запрос по 80 порту нашего nginx сервера пробрасывается корректно в gunicorn,
можно использовать команду
curl 127.0.0.1/hello/?a=b
Результаты обеих команд должны быть одинаковы

После изменения конфига nginx'a делайте sudo service nginx restart
я делал sudo nginx -s reload и это не работало. Нужен только рестарт.

Количество workers в конфиге правильно указывать таким способом из документации:
import multiprocessing
workers = multiprocessing.cpu_count() * 2 + 1

Для тех, кто хочет использовать Python3 - прописываем в конфиге gunicorn :
python: /usr/bin/python3
Или для использующих формат CONFIG = {....}
'python' : '/usr/bin/python3'